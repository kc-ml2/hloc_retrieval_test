#!/usr/bin/env python
import os
import os.path

from algorithms import resnet

# loaded from environment
SMOOTHED_LOCALIZATION = True
MEMORY_SUBSAMPLING = 4
MIN_SHORTCUT_DISTANCE = 5
MEMORY_MAX_FRAMES = None
ACTION_EXPERIMENT_ID = "0102_L"
EDGE_EXPERIMENT_ID = "0103_R"
EXPERIMENT_OUTPUT_FOLDER = "default_experiment"
WEAK_INTERMEDIATE_REACHABLE_GOAL_THRESHOLD = 0.7
INTERMEDIATE_REACHABLE_GOAL_THRESHOLD = 0.95
SMALL_SHORTCUTS_NUMBER = 2000
SHORTCUT_WINDOW = 10
MIN_LOOK_AHEAD = 1
MAX_LOOK_AHEAD = 7
NUMBER_OF_TRIALS = 6
EDGE_ARCHITECTURE = "SIAMESE_NETWORK"

# training
DEFAULT_RANDOM_SEED = 100
LEARNING_RATE = 1e-04
MODEL_CHECKPOINT_PERIOD = 100
MIN_RANDOM_TEXTURE_MAP_INDEX = 2
MAX_RANDOM_TEXTURE_MAP_INDEX = 401
TRAIN_REPEAT = 4
MAX_ACTION_DISTANCE = 5
MAX_CONTINUOUS_PLAY = 10000
BATCH_SIZE = 64
DUMP_AFTER_BATCHES = 100
INF_EPOCHS = 1000000000
EDGE_MAX_EPOCHS = 10000
ACTION_MAX_EPOCHS = 19000
EDGE_EPISODES = 10
EDGE_CLASSES = 2
NEGATIVE_SAMPLE_MULTIPLIER = 5
TRAIN_MEMORY_FRACTION = 0.4
ACTION_MAX_YIELD_COUNT_BEFORE_RESTART = int(20 * 100 * 64 / BATCH_SIZE)

# testing
TEST_REPEAT = TRAIN_REPEAT
JOINT_NETWORK = resnet.ResnetBuilder.build_resnet_18
SIAMESE_NETWORK = resnet.ResnetBuilder.build_siamese_resnet_18
EDGE_NETWORK = eval(EDGE_ARCHITECTURE)
ACTION_NETWORK = resnet.ResnetBuilder.build_resnet_18
DEEP_NET_ACTIONS = 1
GOAL_DISTANCE_ALLOWANCE = 63
TESTING_BATCH_SIZE = 1024
MAX_NUMBER_OF_STEPS_EXPLORATION = 10000
MAX_NUMBER_OF_STEPS_NAVIGATION = 5000
NUMBER_OF_NEAREST_NEIGHBOURS = 5
LARGE_SHORTCUTS_NUMBER = 100000
assert SMALL_SHORTCUTS_NUMBER <= LARGE_SHORTCUTS_NUMBER
TEST_RANDOM_SEED = DEFAULT_RANDOM_SEED + 1
TEST_MEMORY_FRACTION = 0.15

# paths
EXPERIMENTS_DIRECTORY = "../../experiments/"
EXPERIMENTS_PATH_TEMPLATE = os.path.join(EXPERIMENTS_DIRECTORY, "%s/")
LOGS_PATH_TEMPLATE = os.path.join(EXPERIMENTS_PATH_TEMPLATE, "logs/")
MODELS_PATH_TEMPLATE = os.path.join(EXPERIMENTS_PATH_TEMPLATE, "models/")
LAST_MODEL_PATH_TEMPLATE = os.path.join(MODELS_PATH_TEMPLATE, "model.h5")
CURRENT_MODEL_PATH_TEMPLATE = os.path.join(MODELS_PATH_TEMPLATE, "model.{epoch:06d}.h5")
EVALUATION_PATH_TEMPLATE = os.path.join(EXPERIMENTS_PATH_TEMPLATE, "evaluation/")
TESTED_MODEL_PATH_TEMPLATE = os.path.join(MODELS_PATH_TEMPLATE, "model.h5")
ACTION_MODEL_ITERATION = ACTION_MAX_EPOCHS - 1
EDGE_MODEL_ITERATION = EDGE_MAX_EPOCHS - 1
ACTION_MODEL_PATH = os.path.join(
    (MODELS_PATH_TEMPLATE % ACTION_EXPERIMENT_ID), "model.%.6d.h5" % ACTION_MODEL_ITERATION
)
ACTION_MODEL_WEIGHTS_PATH = os.path.join((MODELS_PATH_TEMPLATE % ACTION_EXPERIMENT_ID), "model_weights.h5")
EDGE_MODEL_PATH = os.path.join((MODELS_PATH_TEMPLATE % EDGE_EXPERIMENT_ID), "model.%.6d.h5" % EDGE_MODEL_ITERATION)
EDGE_MODEL_WEIGHTS_PATH = os.path.join((MODELS_PATH_TEMPLATE % EDGE_EXPERIMENT_ID), "model_weights.h5")
EVALUATION_PATH = EVALUATION_PATH_TEMPLATE % EXPERIMENT_OUTPUT_FOLDER
SHORTCUTS_OUTPUT_PATH = os.path.join(EVALUATION_PATH, "graph_shortcuts")
SHORTCUTS_CACHE_FILE_TEMPLATE = os.path.join(SHORTCUTS_OUTPUT_PATH, "%s_skip%d_max%d_shortcuts.npy")

# input size
NET_WIDTH = 160
NET_HEIGHT = 120
NET_CHANNELS = 3
